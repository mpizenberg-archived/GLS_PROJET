/*
* generated by Xtext
*/
grammar InternalPDLX;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package fr.enseeiht.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package fr.enseeiht.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import fr.enseeiht.services.PDLXGrammarAccess;

}

@parser::members {
 
 	private PDLXGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(PDLXGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleProcess
entryRuleProcess 
:
{ before(grammarAccess.getProcessRule()); }
	 ruleProcess
{ after(grammarAccess.getProcessRule()); } 
	 EOF 
;

// Rule Process
ruleProcess
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getProcessAccess().getGroup()); }
(rule__Process__Group__0)
{ after(grammarAccess.getProcessAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleProcessElement
entryRuleProcessElement 
:
{ before(grammarAccess.getProcessElementRule()); }
	 ruleProcessElement
{ after(grammarAccess.getProcessElementRule()); } 
	 EOF 
;

// Rule ProcessElement
ruleProcessElement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getProcessElementAccess().getAlternatives()); }
(rule__ProcessElement__Alternatives)
{ after(grammarAccess.getProcessElementAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleWorkDefinition
entryRuleWorkDefinition 
:
{ before(grammarAccess.getWorkDefinitionRule()); }
	 ruleWorkDefinition
{ after(grammarAccess.getWorkDefinitionRule()); } 
	 EOF 
;

// Rule WorkDefinition
ruleWorkDefinition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getWorkDefinitionAccess().getGroup()); }
(rule__WorkDefinition__Group__0)
{ after(grammarAccess.getWorkDefinitionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRessource
entryRuleRessource 
:
{ before(grammarAccess.getRessourceRule()); }
	 ruleRessource
{ after(grammarAccess.getRessourceRule()); } 
	 EOF 
;

// Rule Ressource
ruleRessource
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRessourceAccess().getGroup()); }
(rule__Ressource__Group__0)
{ after(grammarAccess.getRessourceAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNeed
entryRuleNeed 
:
{ before(grammarAccess.getNeedRule()); }
	 ruleNeed
{ after(grammarAccess.getNeedRule()); } 
	 EOF 
;

// Rule Need
ruleNeed
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNeedAccess().getGroup()); }
(rule__Need__Group__0)
{ after(grammarAccess.getNeedAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNeedSet
entryRuleNeedSet 
:
{ before(grammarAccess.getNeedSetRule()); }
	 ruleNeedSet
{ after(grammarAccess.getNeedSetRule()); } 
	 EOF 
;

// Rule NeedSet
ruleNeedSet
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNeedSetAccess().getGroup()); }
(rule__NeedSet__Group__0)
{ after(grammarAccess.getNeedSetAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleWorkSequence
entryRuleWorkSequence 
:
{ before(grammarAccess.getWorkSequenceRule()); }
	 ruleWorkSequence
{ after(grammarAccess.getWorkSequenceRule()); } 
	 EOF 
;

// Rule WorkSequence
ruleWorkSequence
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getWorkSequenceAccess().getGroup()); }
(rule__WorkSequence__Group__0)
{ after(grammarAccess.getWorkSequenceAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleGuidance
entryRuleGuidance 
:
{ before(grammarAccess.getGuidanceRule()); }
	 ruleGuidance
{ after(grammarAccess.getGuidanceRule()); } 
	 EOF 
;

// Rule Guidance
ruleGuidance
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getGuidanceAccess().getTextAssignment()); }
(rule__Guidance__TextAssignment)
{ after(grammarAccess.getGuidanceAccess().getTextAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}




// Rule WorkSequenceType
ruleWorkSequenceType
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWorkSequenceTypeAccess().getAlternatives()); }
(rule__WorkSequenceType__Alternatives)
{ after(grammarAccess.getWorkSequenceTypeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__ProcessElement__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcessElementAccess().getWorkDefinitionParserRuleCall_0()); }
	ruleWorkDefinition
{ after(grammarAccess.getProcessElementAccess().getWorkDefinitionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getProcessElementAccess().getWorkSequenceParserRuleCall_1()); }
	ruleWorkSequence
{ after(grammarAccess.getProcessElementAccess().getWorkSequenceParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getProcessElementAccess().getGuidanceParserRuleCall_2()); }
	ruleGuidance
{ after(grammarAccess.getProcessElementAccess().getGuidanceParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getProcessElementAccess().getRessourceParserRuleCall_3()); }
	ruleRessource
{ after(grammarAccess.getProcessElementAccess().getRessourceParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getProcessElementAccess().getNeedParserRuleCall_4()); }
	ruleNeed
{ after(grammarAccess.getProcessElementAccess().getNeedParserRuleCall_4()); }
)

    |(
{ before(grammarAccess.getProcessElementAccess().getNeedSetParserRuleCall_5()); }
	ruleNeedSet
{ after(grammarAccess.getProcessElementAccess().getNeedSetParserRuleCall_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__WorkSequenceType__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWorkSequenceTypeAccess().getStart2startEnumLiteralDeclaration_0()); }
(	's2s' 
)
{ after(grammarAccess.getWorkSequenceTypeAccess().getStart2startEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getWorkSequenceTypeAccess().getFinish2startEnumLiteralDeclaration_1()); }
(	'f2s' 
)
{ after(grammarAccess.getWorkSequenceTypeAccess().getFinish2startEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getWorkSequenceTypeAccess().getStart2finishEnumLiteralDeclaration_2()); }
(	's2f' 
)
{ after(grammarAccess.getWorkSequenceTypeAccess().getStart2finishEnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getWorkSequenceTypeAccess().getFinish2finishEnumLiteralDeclaration_3()); }
(	'f2f' 
)
{ after(grammarAccess.getWorkSequenceTypeAccess().getFinish2finishEnumLiteralDeclaration_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Process__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Process__Group__0__Impl
	rule__Process__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Process__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcessAccess().getProcessKeyword_0()); }

	'process' 

{ after(grammarAccess.getProcessAccess().getProcessKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Process__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Process__Group__1__Impl
	rule__Process__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Process__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcessAccess().getNameAssignment_1()); }
(rule__Process__NameAssignment_1)
{ after(grammarAccess.getProcessAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Process__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Process__Group__2__Impl
	rule__Process__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Process__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcessAccess().getLeftCurlyBracketKeyword_2()); }

	'{' 

{ after(grammarAccess.getProcessAccess().getLeftCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Process__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Process__Group__3__Impl
	rule__Process__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Process__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcessAccess().getProcessElementsAssignment_3()); }
(rule__Process__ProcessElementsAssignment_3)*
{ after(grammarAccess.getProcessAccess().getProcessElementsAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Process__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Process__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Process__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcessAccess().getRightCurlyBracketKeyword_4()); }

	'}' 

{ after(grammarAccess.getProcessAccess().getRightCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__WorkDefinition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WorkDefinition__Group__0__Impl
	rule__WorkDefinition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__WorkDefinition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWorkDefinitionAccess().getWdKeyword_0()); }

	'wd' 

{ after(grammarAccess.getWorkDefinitionAccess().getWdKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__WorkDefinition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WorkDefinition__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__WorkDefinition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWorkDefinitionAccess().getNameAssignment_1()); }
(rule__WorkDefinition__NameAssignment_1)
{ after(grammarAccess.getWorkDefinitionAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Ressource__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Ressource__Group__0__Impl
	rule__Ressource__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Ressource__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRessourceAccess().getRKeyword_0()); }

	'r' 

{ after(grammarAccess.getRessourceAccess().getRKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Ressource__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Ressource__Group__1__Impl
	rule__Ressource__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Ressource__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRessourceAccess().getNameAssignment_1()); }
(rule__Ressource__NameAssignment_1)
{ after(grammarAccess.getRessourceAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Ressource__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Ressource__Group__2__Impl
	rule__Ressource__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Ressource__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRessourceAccess().getLeftParenthesisKeyword_2()); }

	'(' 

{ after(grammarAccess.getRessourceAccess().getLeftParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Ressource__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Ressource__Group__3__Impl
	rule__Ressource__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Ressource__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRessourceAccess().getQuantityAssignment_3()); }
(rule__Ressource__QuantityAssignment_3)
{ after(grammarAccess.getRessourceAccess().getQuantityAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Ressource__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Ressource__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Ressource__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRessourceAccess().getRightParenthesisKeyword_4()); }

	')' 

{ after(grammarAccess.getRessourceAccess().getRightParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Need__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Need__Group__0__Impl
	rule__Need__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Need__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNeedAccess().getNKeyword_0()); }

	'n' 

{ after(grammarAccess.getNeedAccess().getNKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Need__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Need__Group__1__Impl
	rule__Need__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Need__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNeedAccess().getRessourceAssignment_1()); }
(rule__Need__RessourceAssignment_1)
{ after(grammarAccess.getNeedAccess().getRessourceAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Need__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Need__Group__2__Impl
	rule__Need__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Need__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNeedAccess().getLeftParenthesisKeyword_2()); }

	'(' 

{ after(grammarAccess.getNeedAccess().getLeftParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Need__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Need__Group__3__Impl
	rule__Need__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Need__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNeedAccess().getQuantityAssignment_3()); }
(rule__Need__QuantityAssignment_3)
{ after(grammarAccess.getNeedAccess().getQuantityAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Need__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Need__Group__4__Impl
	rule__Need__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Need__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNeedAccess().getRightParenthesisKeyword_4()); }

	')' 

{ after(grammarAccess.getNeedAccess().getRightParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Need__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Need__Group__5__Impl
	rule__Need__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Need__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNeedAccess().getSetKeyword_5()); }

	'set' 

{ after(grammarAccess.getNeedAccess().getSetKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Need__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Need__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Need__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNeedAccess().getNeedSetAssignment_6()); }
(rule__Need__NeedSetAssignment_6)
{ after(grammarAccess.getNeedAccess().getNeedSetAssignment_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__NeedSet__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NeedSet__Group__0__Impl
	rule__NeedSet__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NeedSet__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNeedSetAccess().getSetKeyword_0()); }

	'set' 

{ after(grammarAccess.getNeedSetAccess().getSetKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NeedSet__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NeedSet__Group__1__Impl
	rule__NeedSet__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NeedSet__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNeedSetAccess().getNameAssignment_1()); }
(rule__NeedSet__NameAssignment_1)
{ after(grammarAccess.getNeedSetAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NeedSet__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NeedSet__Group__2__Impl
	rule__NeedSet__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__NeedSet__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNeedSetAccess().getWdKeyword_2()); }

	'wd' 

{ after(grammarAccess.getNeedSetAccess().getWdKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NeedSet__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NeedSet__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NeedSet__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNeedSetAccess().getWdAssignment_3()); }
(rule__NeedSet__WdAssignment_3)
{ after(grammarAccess.getNeedSetAccess().getWdAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__WorkSequence__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WorkSequence__Group__0__Impl
	rule__WorkSequence__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__WorkSequence__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWorkSequenceAccess().getWsKeyword_0()); }

	'ws' 

{ after(grammarAccess.getWorkSequenceAccess().getWsKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__WorkSequence__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WorkSequence__Group__1__Impl
	rule__WorkSequence__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__WorkSequence__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWorkSequenceAccess().getLinkTypeAssignment_1()); }
(rule__WorkSequence__LinkTypeAssignment_1)
{ after(grammarAccess.getWorkSequenceAccess().getLinkTypeAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__WorkSequence__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WorkSequence__Group__2__Impl
	rule__WorkSequence__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__WorkSequence__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWorkSequenceAccess().getFromKeyword_2()); }

	'from' 

{ after(grammarAccess.getWorkSequenceAccess().getFromKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__WorkSequence__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WorkSequence__Group__3__Impl
	rule__WorkSequence__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__WorkSequence__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWorkSequenceAccess().getPredecessorAssignment_3()); }
(rule__WorkSequence__PredecessorAssignment_3)
{ after(grammarAccess.getWorkSequenceAccess().getPredecessorAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__WorkSequence__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WorkSequence__Group__4__Impl
	rule__WorkSequence__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__WorkSequence__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWorkSequenceAccess().getToKeyword_4()); }

	'to' 

{ after(grammarAccess.getWorkSequenceAccess().getToKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__WorkSequence__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WorkSequence__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__WorkSequence__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWorkSequenceAccess().getSuccessorAssignment_5()); }
(rule__WorkSequence__SuccessorAssignment_5)
{ after(grammarAccess.getWorkSequenceAccess().getSuccessorAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}















rule__Process__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcessAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getProcessAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Process__ProcessElementsAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcessAccess().getProcessElementsProcessElementParserRuleCall_3_0()); }
	ruleProcessElement{ after(grammarAccess.getProcessAccess().getProcessElementsProcessElementParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__WorkDefinition__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWorkDefinitionAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getWorkDefinitionAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Ressource__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRessourceAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getRessourceAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Ressource__QuantityAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRessourceAccess().getQuantityINTTerminalRuleCall_3_0()); }
	RULE_INT{ after(grammarAccess.getRessourceAccess().getQuantityINTTerminalRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Need__RessourceAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNeedAccess().getRessourceRessourceCrossReference_1_0()); }
(
{ before(grammarAccess.getNeedAccess().getRessourceRessourceIDTerminalRuleCall_1_0_1()); }
	RULE_ID{ after(grammarAccess.getNeedAccess().getRessourceRessourceIDTerminalRuleCall_1_0_1()); }
)
{ after(grammarAccess.getNeedAccess().getRessourceRessourceCrossReference_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Need__QuantityAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNeedAccess().getQuantityINTTerminalRuleCall_3_0()); }
	RULE_INT{ after(grammarAccess.getNeedAccess().getQuantityINTTerminalRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Need__NeedSetAssignment_6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNeedAccess().getNeedSetNeedSetCrossReference_6_0()); }
(
{ before(grammarAccess.getNeedAccess().getNeedSetNeedSetIDTerminalRuleCall_6_0_1()); }
	RULE_ID{ after(grammarAccess.getNeedAccess().getNeedSetNeedSetIDTerminalRuleCall_6_0_1()); }
)
{ after(grammarAccess.getNeedAccess().getNeedSetNeedSetCrossReference_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NeedSet__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNeedSetAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getNeedSetAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NeedSet__WdAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNeedSetAccess().getWdWorkDefinitionCrossReference_3_0()); }
(
{ before(grammarAccess.getNeedSetAccess().getWdWorkDefinitionIDTerminalRuleCall_3_0_1()); }
	RULE_ID{ after(grammarAccess.getNeedSetAccess().getWdWorkDefinitionIDTerminalRuleCall_3_0_1()); }
)
{ after(grammarAccess.getNeedSetAccess().getWdWorkDefinitionCrossReference_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__WorkSequence__LinkTypeAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWorkSequenceAccess().getLinkTypeWorkSequenceTypeEnumRuleCall_1_0()); }
	ruleWorkSequenceType{ after(grammarAccess.getWorkSequenceAccess().getLinkTypeWorkSequenceTypeEnumRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__WorkSequence__PredecessorAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWorkSequenceAccess().getPredecessorWorkDefinitionCrossReference_3_0()); }
(
{ before(grammarAccess.getWorkSequenceAccess().getPredecessorWorkDefinitionIDTerminalRuleCall_3_0_1()); }
	RULE_ID{ after(grammarAccess.getWorkSequenceAccess().getPredecessorWorkDefinitionIDTerminalRuleCall_3_0_1()); }
)
{ after(grammarAccess.getWorkSequenceAccess().getPredecessorWorkDefinitionCrossReference_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__WorkSequence__SuccessorAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWorkSequenceAccess().getSuccessorWorkDefinitionCrossReference_5_0()); }
(
{ before(grammarAccess.getWorkSequenceAccess().getSuccessorWorkDefinitionIDTerminalRuleCall_5_0_1()); }
	RULE_ID{ after(grammarAccess.getWorkSequenceAccess().getSuccessorWorkDefinitionIDTerminalRuleCall_5_0_1()); }
)
{ after(grammarAccess.getWorkSequenceAccess().getSuccessorWorkDefinitionCrossReference_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Guidance__TextAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGuidanceAccess().getTextSTRINGTerminalRuleCall_0()); }
	RULE_STRING{ after(grammarAccess.getGuidanceAccess().getTextSTRINGTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


